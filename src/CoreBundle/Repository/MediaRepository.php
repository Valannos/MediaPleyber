<?php

namespace CoreBundle\Repository;

use Doctrine\ORM\QueryBuilder;
use Symfony\Component\Validator\Constraints\Date;
use CoreBundle\Entity\Media;

/**
 * MediaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MediaRepository extends \Doctrine\ORM\EntityRepository {

    public function getNewContent() {
        $limitDate = new \DateTime();
        $limitDate->
                setDate(2016, 10, 1);


        $qb = $this->createQueryBuilder('m')
                ->where('m.date > :date')
                ->setParameter('date', $limitDate)
        ;
        return $qb->getQuery()->getResult();
    }

    public function getMediaByReservation($res) {


        return $res->getMedia();
    }
    
    public function getMediaByLoan(\CoreBundle\Entity\Loan $loan) {
        
        return $loan->getMedia();
        
    }
    
    

    public function updateStatutToReserved($media, $newStatus) {

        
        if ($media->getStatut() == 2 || $media->getStatut() == 3) {
            return false;
        } else {
            $media->setStatut($newStatus);
            $this->getEntitymanager()->persist($media);
            $this->getEntityManager()->flush();
            return true;
        }
    }

    public function updateStatutToBorrowed(Media $media, $newStatus) {


        if ($media->getStatut() != 2) {
            return false;
        } else {
            $media->setStatut($newStatus);
            $this->getEntitymanager()->persist($media);
            $this->getEntityManager()->flush();
            return true;
        }
    }
    
    public function updateStatutToAvailable(Media $media, $newStatus) {

       
        if ($media->getStatut() == 1 ) {
            return false;
        } else {
            $media->setStatut($newStatus);
            $this->getEntitymanager()->persist($media);
            $this->getEntityManager()->flush();
            return true;
        }
    }

}
